# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc 'Push a new beta build to TestFlight'
  lane :ci_upload_beta_testflight do
    app_store_connect_api_key
    prepare_ci_build('Beta')
    changelog_from_git_commits
    upload_to_testflight(app_identifier: 'com.razeware.emitron.ios.beta',
                         skip_waiting_for_build_processing: true)
    slack(message: 'emitron::Î² successfully uploaded to TestFlight!')
  end

  desc 'Push a new production build to TestFlight'
  lane :ci_upload_release_testflight do
    app_store_connect_api_key
    prepare_ci_build('Release')
    changelog_from_git_commits
    upload_to_testflight(app_identifier: 'com.razeware.emitron.ios',
                         skip_waiting_for_build_processing: true)
    slack(message: 'emitron::release successfully uploaded to TestFlight!')
  end

  desc 'Push a new release version to App Store Connect ready for release'
  lane :ci_upload_release_appstore do
    app_store_connect_api_key
    prepare_ci_build('Release')
    upload_to_app_store(app_identifier: 'com.razeware.emitron.ios')
    slack(message: 'emitron successfully uploaded to App Store Connect!')
  end

  lane :tests do
    Dir.chdir('..') do
      sh 'xcodebuild -resolvePackageDependencies'
    end
    run_tests(scheme: 'Emitron')
  end
end

def prepare_ci_build(configuration)
  setup_ci(provider: 'travis', force: true) # Until GA are properly supported
  sync_code_signing(type: 'appstore', readonly: true)
  Dir.chdir('..') do
    sh 'xcodebuild -resolvePackageDependencies'
  end
  build_app(scheme: 'Emitron', configuration: configuration)
end

error do |_lane, exception|
  slack(
    # message with short human friendly message
    message: exception.to_s,
    success: false,
    # Output containing extended log output
    payload: { 'Output' => exception.error_info.to_s }
  )
end
